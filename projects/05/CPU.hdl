// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
/**
* Hack Instruction description
* C-instruction: i(1) xx a cccccc ddd jjj
* A-instruction: 0 xxxxxxxxxxxxxxx
*/
    //ALU Arithmatic logic unit
    ALU(x=outd, y=am, zx=c1, 
                      nx=c2, 
                      zy=c3, 
                      ny=c4, 
                       f=c5, 
                      no=c6, 
                      out=aluina,
                      out=inb,
                      out=outM, 
                      zr=zr, ng=ng);

//ARegister and DRegister are versions of Register with special debugging features
    //A Address register
    ARegister(in=ina, load=la, out=outa, out=inpc, out[0..14]=addressM);
    
    //D Data register
    DRegister(in=inb, load=d2, out=outd);

    //PC Program counter
    PC(in=inpc, load=lpc, inc=true, reset=reset, out[0..14]=pc);

    //Controllor Hack Instruction Architecher
    DMux16(in=instruction, sel=instruction[15], a=ains, //seperate the a-ins and the c-ins self-build DMux16
                                                b[12]=a,
                                                b[11]=c1,
                                                b[10]=c2,
                                                b[9]=c3,
                                                b[8]=c4,
                                                b[7]=c5,
                                                b[6]=c6,
                                                b[5]=d1, 
                                                b[4]=d2,
                                                b[3]=writeM, //d3
                                                b[0..2]=jjj);
    
    Mux16(a=ains, b=aluina, sel=instruction[15], out=ina);//a-ins or c-ins out of alu -> input a
    
    Not(in=instruction[15], out=ni); //a-ins
    //And(a=instruction[15], b=instruction[5], out=oba); //eliminated by boolean func
    Or(a=ni, b=d1, out=la); //a-ins or c-ins d1 -> load a
    //And(a=instruction[15], b=instruction[4], out=ld); //c-ins d2 -> load d //realized above
    //And(a=instruction[15], b=instruction[3], out=writeM); //c-ins d3 -> write M //realized above

    Mux16(a=outa, b=inM, sel=a, out=am);//cins a dets outa or inM -> alu input a/m

    Not(in=zr, out=nzr);
    Not(in=ng, out=ge);
    And(a=nzr, b=ge, out=jgt);
    Or(a=zr, b=ng, out=jle);
    Mux8Way(a=false, //Null, self-build Mux8Way
            b=jgt, //JGT
            c=zr,  //JEQ
            d=ge,  //JGE
            e=ng,  //JLT
            f=nzr, //JNE
            g=jle, //JLE
            h=true,//JMP
            sel=jjj, out=lpc);

}